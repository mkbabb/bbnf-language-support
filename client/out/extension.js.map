{"version":3,"file":"extension.js","sources":["../../node_modules/@mkbabb/parse-that/dist/parse.js","../../node_modules/@mkbabb/parse-that/dist/ebnf.js","../src/extension.ts"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport chalk from \"chalk\";\nvar docExports = {};\nvar doc = {\n  get exports() {\n    return docExports;\n  },\n  set exports(v) {\n    docExports = v;\n  }\n};\n(function(module, exports) {\n  (function(factory) {\n    {\n      module.exports = factory();\n    }\n  })(function() {\n    var __getOwnPropNames = Object.getOwnPropertyNames;\n    var __commonJS = (cb, mod) => function __require() {\n      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n    };\n    var require_doc_js_umd = __commonJS({\n      \"dist/_doc.js.umd.js\"(exports2, module2) {\n        var __create = Object.create;\n        var __defProp2 = Object.defineProperty;\n        var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n        var __getOwnPropNames2 = Object.getOwnPropertyNames;\n        var __getProtoOf = Object.getPrototypeOf;\n        var __hasOwnProp = Object.prototype.hasOwnProperty;\n        var __esm = (fn, res) => function __init() {\n          return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;\n        };\n        var __commonJS2 = (cb, mod) => function __require() {\n          return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = {\n            exports: {}\n          }).exports, mod), mod.exports;\n        };\n        var __export = (target, all2) => {\n          for (var name in all2)\n            __defProp2(target, name, {\n              get: all2[name],\n              enumerable: true\n            });\n        };\n        var __copyProps = (to, from, except, desc) => {\n          if (from && typeof from === \"object\" || typeof from === \"function\") {\n            for (let key of __getOwnPropNames2(from))\n              if (!__hasOwnProp.call(to, key) && key !== except)\n                __defProp2(to, key, {\n                  get: () => from[key],\n                  enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n                });\n          }\n          return to;\n        };\n        var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, \"default\", {\n          value: mod,\n          enumerable: true\n        }) : target, mod));\n        var __toCommonJS = (mod) => __copyProps(__defProp2({}, \"__esModule\", {\n          value: true\n        }), mod);\n        var init_define_process = __esm({\n          \"<define:process>\"() {\n          }\n        });\n        var require_doc_builders = __commonJS2({\n          \"src/document/doc-builders.js\"(exports22, module22) {\n            init_define_process();\n            function concat(parts) {\n              return {\n                type: \"concat\",\n                parts\n              };\n            }\n            function indent(contents) {\n              return {\n                type: \"indent\",\n                contents\n              };\n            }\n            function align(widthOrString, contents) {\n              return {\n                type: \"align\",\n                contents,\n                n: widthOrString\n              };\n            }\n            function group2(contents) {\n              let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n              return {\n                type: \"group\",\n                id: opts.id,\n                contents,\n                break: Boolean(opts.shouldBreak),\n                expandedStates: opts.expandedStates\n              };\n            }\n            function dedentToRoot(contents) {\n              return align(Number.NEGATIVE_INFINITY, contents);\n            }\n            function markAsRoot(contents) {\n              return align({\n                type: \"root\"\n              }, contents);\n            }\n            function dedent(contents) {\n              return align(-1, contents);\n            }\n            function conditionalGroup(states, opts) {\n              return group2(states[0], Object.assign(Object.assign({}, opts), {}, {\n                expandedStates: states\n              }));\n            }\n            function fill(parts) {\n              return {\n                type: \"fill\",\n                parts\n              };\n            }\n            function ifBreak(breakContents, flatContents) {\n              let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n              return {\n                type: \"if-break\",\n                breakContents,\n                flatContents,\n                groupId: opts.groupId\n              };\n            }\n            function indentIfBreak(contents, opts) {\n              return {\n                type: \"indent-if-break\",\n                contents,\n                groupId: opts.groupId,\n                negate: opts.negate\n              };\n            }\n            function lineSuffix(contents) {\n              return {\n                type: \"line-suffix\",\n                contents\n              };\n            }\n            var lineSuffixBoundary = {\n              type: \"line-suffix-boundary\"\n            };\n            var breakParent = {\n              type: \"break-parent\"\n            };\n            var trim = {\n              type: \"trim\"\n            };\n            var hardlineWithoutBreakParent = {\n              type: \"line\",\n              hard: true\n            };\n            var literallineWithoutBreakParent = {\n              type: \"line\",\n              hard: true,\n              literal: true\n            };\n            var line = {\n              type: \"line\"\n            };\n            var softline = {\n              type: \"line\",\n              soft: true\n            };\n            var hardline = concat([hardlineWithoutBreakParent, breakParent]);\n            var literalline = concat([literallineWithoutBreakParent, breakParent]);\n            var cursor = {\n              type: \"cursor\",\n              placeholder: Symbol(\"cursor\")\n            };\n            function join(sep, arr) {\n              const res = [];\n              for (let i = 0; i < arr.length; i++) {\n                if (i !== 0) {\n                  res.push(sep);\n                }\n                res.push(arr[i]);\n              }\n              return concat(res);\n            }\n            function addAlignmentToDoc(doc2, size, tabWidth) {\n              let aligned = doc2;\n              if (size > 0) {\n                for (let i = 0; i < Math.floor(size / tabWidth); ++i) {\n                  aligned = indent(aligned);\n                }\n                aligned = align(size % tabWidth, aligned);\n                aligned = align(Number.NEGATIVE_INFINITY, aligned);\n              }\n              return aligned;\n            }\n            function label(label2, contents) {\n              return {\n                type: \"label\",\n                label: label2,\n                contents\n              };\n            }\n            module22.exports = {\n              concat,\n              join,\n              line,\n              softline,\n              hardline,\n              literalline,\n              group: group2,\n              conditionalGroup,\n              fill,\n              lineSuffix,\n              lineSuffixBoundary,\n              cursor,\n              breakParent,\n              ifBreak,\n              trim,\n              indent,\n              indentIfBreak,\n              align,\n              addAlignmentToDoc,\n              markAsRoot,\n              dedentToRoot,\n              dedent,\n              hardlineWithoutBreakParent,\n              literallineWithoutBreakParent,\n              label\n            };\n          }\n        });\n        var require_end_of_line = __commonJS2({\n          \"src/common/end-of-line.js\"(exports22, module22) {\n            init_define_process();\n            function guessEndOfLine(text) {\n              const index = text.indexOf(\"\\r\");\n              if (index >= 0) {\n                return text.charAt(index + 1) === \"\\n\" ? \"crlf\" : \"cr\";\n              }\n              return \"lf\";\n            }\n            function convertEndOfLineToChars(value) {\n              switch (value) {\n                case \"cr\":\n                  return \"\\r\";\n                case \"crlf\":\n                  return \"\\r\\n\";\n                default:\n                  return \"\\n\";\n              }\n            }\n            function countEndOfLineChars(text, eol) {\n              let regex2;\n              switch (eol) {\n                case \"\\n\":\n                  regex2 = /\\n/g;\n                  break;\n                case \"\\r\":\n                  regex2 = /\\r/g;\n                  break;\n                case \"\\r\\n\":\n                  regex2 = /\\r\\n/g;\n                  break;\n                default:\n                  throw new Error(`Unexpected \"eol\" ${JSON.stringify(eol)}.`);\n              }\n              const endOfLines = text.match(regex2);\n              return endOfLines ? endOfLines.length : 0;\n            }\n            function normalizeEndOfLine(text) {\n              return text.replace(/\\r\\n?/g, \"\\n\");\n            }\n            module22.exports = {\n              guessEndOfLine,\n              convertEndOfLineToChars,\n              countEndOfLineChars,\n              normalizeEndOfLine\n            };\n          }\n        });\n        var require_get_last = __commonJS2({\n          \"src/utils/get-last.js\"(exports22, module22) {\n            init_define_process();\n            var getLast = (arr) => arr[arr.length - 1];\n            module22.exports = getLast;\n          }\n        });\n        function ansiRegex() {\n          let {\n            onlyFirst = false\n          } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n          const pattern = [\"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\", \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"].join(\"|\");\n          return new RegExp(pattern, onlyFirst ? void 0 : \"g\");\n        }\n        var init_ansi_regex = __esm({\n          \"node_modules/strip-ansi/node_modules/ansi-regex/index.js\"() {\n            init_define_process();\n          }\n        });\n        function stripAnsi(string2) {\n          if (typeof string2 !== \"string\") {\n            throw new TypeError(`Expected a \\`string\\`, got \\`${typeof string2}\\``);\n          }\n          return string2.replace(ansiRegex(), \"\");\n        }\n        var init_strip_ansi = __esm({\n          \"node_modules/strip-ansi/index.js\"() {\n            init_define_process();\n            init_ansi_regex();\n          }\n        });\n        function isFullwidthCodePoint(codePoint) {\n          if (!Number.isInteger(codePoint)) {\n            return false;\n          }\n          return codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141);\n        }\n        var init_is_fullwidth_code_point = __esm({\n          \"node_modules/is-fullwidth-code-point/index.js\"() {\n            init_define_process();\n          }\n        });\n        var require_emoji_regex = __commonJS2({\n          \"node_modules/emoji-regex/index.js\"(exports22, module22) {\n            init_define_process();\n            module22.exports = function() {\n              return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|(?:\\uD83E\\uDDD1\\uD83C\\uDFFF\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C\\uDFFB(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF]))|\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))?|(?:\\uD83C[\\uDFFC-\\uDFFF])\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFF]))|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\u200D(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC)?|(?:\\uD83D\\uDC69(?:\\uD83C\\uDFFB\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|(?:\\uD83C[\\uDFFC-\\uDFFF])\\u200D\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC69(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83E\\uDDD1(?:\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B|\\uD83C\\uDFF3\\uFE0F\\u200D\\u26A7|\\uD83D\\uDC3B\\u200D\\u2744|(?:(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\uD83C\\uDFF4\\u200D\\u2620|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])\\u200D[\\u2640\\u2642]|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u2600-\\u2604\\u260E\\u2611\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26B0\\u26B1\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0\\u26F1\\u26F4\\u26F7\\u26F8\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]|\\uD83D[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3])\\uFE0F|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDE35\\u200D\\uD83D\\uDCAB|\\uD83D\\uDE2E\\u200D\\uD83D\\uDCA8|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC|\\uD83C\\uDFFB)?|\\uD83D\\uDC69(?:\\uD83C\\uDFFF|\\uD83C\\uDFFE|\\uD83C\\uDFFD|\\uD83C\\uDFFC|\\uD83C\\uDFFB)?|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83D\\uDC08\\u200D\\u2B1B|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79)|\\uD83D\\uDC41\\uFE0F|\\uD83C\\uDFF3\\uFE0F|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|[#\\*0-9]\\uFE0F\\u20E3|\\u2764\\uFE0F|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDFF4|(?:[\\u270A\\u270B]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270C\\u270D]|\\uD83D[\\uDD74\\uDD90])(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])|[\\u270A\\u270B]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC08\\uDC15\\uDC3B\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE2E\\uDE35\\uDE36\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5]|\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD]|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF]|[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD1D\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78\\uDD7A-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCB\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6]|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26A7\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5-\\uDED7\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDD77\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n            };\n          }\n        });\n        var string_width_exports = {};\n        __export(string_width_exports, {\n          default: () => stringWidth\n        });\n        function stringWidth(string2) {\n          if (typeof string2 !== \"string\" || string2.length === 0) {\n            return 0;\n          }\n          string2 = stripAnsi(string2);\n          if (string2.length === 0) {\n            return 0;\n          }\n          string2 = string2.replace((0, import_emoji_regex.default)(), \"  \");\n          let width = 0;\n          for (let index = 0; index < string2.length; index++) {\n            const codePoint = string2.codePointAt(index);\n            if (codePoint <= 31 || codePoint >= 127 && codePoint <= 159) {\n              continue;\n            }\n            if (codePoint >= 768 && codePoint <= 879) {\n              continue;\n            }\n            if (codePoint > 65535) {\n              index++;\n            }\n            width += isFullwidthCodePoint(codePoint) ? 2 : 1;\n          }\n          return width;\n        }\n        var import_emoji_regex;\n        var init_string_width = __esm({\n          \"node_modules/string-width/index.js\"() {\n            init_define_process();\n            init_strip_ansi();\n            init_is_fullwidth_code_point();\n            import_emoji_regex = __toESM(require_emoji_regex());\n          }\n        });\n        var require_get_string_width = __commonJS2({\n          \"src/utils/get-string-width.js\"(exports22, module22) {\n            init_define_process();\n            var stringWidth2 = (init_string_width(), __toCommonJS(string_width_exports)).default;\n            var notAsciiRegex = /[^\\x20-\\x7F]/;\n            function getStringWidth(text) {\n              if (!text) {\n                return 0;\n              }\n              if (!notAsciiRegex.test(text)) {\n                return text.length;\n              }\n              return stringWidth2(text);\n            }\n            module22.exports = getStringWidth;\n          }\n        });\n        var require_doc_utils = __commonJS2({\n          \"src/document/doc-utils.js\"(exports22, module22) {\n            init_define_process();\n            var getLast = require_get_last();\n            var {\n              literalline,\n              join\n            } = require_doc_builders();\n            var isConcat = (doc2) => Array.isArray(doc2) || doc2 && doc2.type === \"concat\";\n            var getDocParts = (doc2) => {\n              if (Array.isArray(doc2)) {\n                return doc2;\n              }\n              if (doc2.type !== \"concat\" && doc2.type !== \"fill\") {\n                throw new Error(\"Expect doc type to be `concat` or `fill`.\");\n              }\n              return doc2.parts;\n            };\n            var traverseDocOnExitStackMarker = {};\n            function traverseDoc(doc2, onEnter, onExit, shouldTraverseConditionalGroups) {\n              const docsStack = [doc2];\n              while (docsStack.length > 0) {\n                const doc22 = docsStack.pop();\n                if (doc22 === traverseDocOnExitStackMarker) {\n                  onExit(docsStack.pop());\n                  continue;\n                }\n                if (onExit) {\n                  docsStack.push(doc22, traverseDocOnExitStackMarker);\n                }\n                if (!onEnter || onEnter(doc22) !== false) {\n                  if (isConcat(doc22) || doc22.type === \"fill\") {\n                    const parts = getDocParts(doc22);\n                    for (let ic = parts.length, i = ic - 1; i >= 0; --i) {\n                      docsStack.push(parts[i]);\n                    }\n                  } else if (doc22.type === \"if-break\") {\n                    if (doc22.flatContents) {\n                      docsStack.push(doc22.flatContents);\n                    }\n                    if (doc22.breakContents) {\n                      docsStack.push(doc22.breakContents);\n                    }\n                  } else if (doc22.type === \"group\" && doc22.expandedStates) {\n                    if (shouldTraverseConditionalGroups) {\n                      for (let ic = doc22.expandedStates.length, i = ic - 1; i >= 0; --i) {\n                        docsStack.push(doc22.expandedStates[i]);\n                      }\n                    } else {\n                      docsStack.push(doc22.contents);\n                    }\n                  } else if (doc22.contents) {\n                    docsStack.push(doc22.contents);\n                  }\n                }\n              }\n            }\n            function mapDoc(doc2, cb) {\n              const mapped = /* @__PURE__ */ new Map();\n              return rec(doc2);\n              function rec(doc22) {\n                if (mapped.has(doc22)) {\n                  return mapped.get(doc22);\n                }\n                const result = process2(doc22);\n                mapped.set(doc22, result);\n                return result;\n              }\n              function process2(doc22) {\n                if (Array.isArray(doc22)) {\n                  return cb(doc22.map(rec));\n                }\n                if (doc22.type === \"concat\" || doc22.type === \"fill\") {\n                  const parts = doc22.parts.map(rec);\n                  return cb(Object.assign(Object.assign({}, doc22), {}, {\n                    parts\n                  }));\n                }\n                if (doc22.type === \"if-break\") {\n                  const breakContents = doc22.breakContents && rec(doc22.breakContents);\n                  const flatContents = doc22.flatContents && rec(doc22.flatContents);\n                  return cb(Object.assign(Object.assign({}, doc22), {}, {\n                    breakContents,\n                    flatContents\n                  }));\n                }\n                if (doc22.type === \"group\" && doc22.expandedStates) {\n                  const expandedStates = doc22.expandedStates.map(rec);\n                  const contents = expandedStates[0];\n                  return cb(Object.assign(Object.assign({}, doc22), {}, {\n                    contents,\n                    expandedStates\n                  }));\n                }\n                if (doc22.contents) {\n                  const contents = rec(doc22.contents);\n                  return cb(Object.assign(Object.assign({}, doc22), {}, {\n                    contents\n                  }));\n                }\n                return cb(doc22);\n              }\n            }\n            function findInDoc(doc2, fn, defaultValue) {\n              let result = defaultValue;\n              let hasStopped = false;\n              function findInDocOnEnterFn(doc22) {\n                const maybeResult = fn(doc22);\n                if (maybeResult !== void 0) {\n                  hasStopped = true;\n                  result = maybeResult;\n                }\n                if (hasStopped) {\n                  return false;\n                }\n              }\n              traverseDoc(doc2, findInDocOnEnterFn);\n              return result;\n            }\n            function willBreakFn(doc2) {\n              if (doc2.type === \"group\" && doc2.break) {\n                return true;\n              }\n              if (doc2.type === \"line\" && doc2.hard) {\n                return true;\n              }\n              if (doc2.type === \"break-parent\") {\n                return true;\n              }\n            }\n            function willBreak(doc2) {\n              return findInDoc(doc2, willBreakFn, false);\n            }\n            function breakParentGroup(groupStack) {\n              if (groupStack.length > 0) {\n                const parentGroup = getLast(groupStack);\n                if (!parentGroup.expandedStates && !parentGroup.break) {\n                  parentGroup.break = \"propagated\";\n                }\n              }\n              return null;\n            }\n            function propagateBreaks(doc2) {\n              const alreadyVisitedSet = /* @__PURE__ */ new Set();\n              const groupStack = [];\n              function propagateBreaksOnEnterFn(doc22) {\n                if (doc22.type === \"break-parent\") {\n                  breakParentGroup(groupStack);\n                }\n                if (doc22.type === \"group\") {\n                  groupStack.push(doc22);\n                  if (alreadyVisitedSet.has(doc22)) {\n                    return false;\n                  }\n                  alreadyVisitedSet.add(doc22);\n                }\n              }\n              function propagateBreaksOnExitFn(doc22) {\n                if (doc22.type === \"group\") {\n                  const group2 = groupStack.pop();\n                  if (group2.break) {\n                    breakParentGroup(groupStack);\n                  }\n                }\n              }\n              traverseDoc(doc2, propagateBreaksOnEnterFn, propagateBreaksOnExitFn, true);\n            }\n            function removeLinesFn(doc2) {\n              if (doc2.type === \"line\" && !doc2.hard) {\n                return doc2.soft ? \"\" : \" \";\n              }\n              if (doc2.type === \"if-break\") {\n                return doc2.flatContents || \"\";\n              }\n              return doc2;\n            }\n            function removeLines(doc2) {\n              return mapDoc(doc2, removeLinesFn);\n            }\n            var isHardline = (doc2, nextDoc) => doc2 && doc2.type === \"line\" && doc2.hard && nextDoc && nextDoc.type === \"break-parent\";\n            function stripDocTrailingHardlineFromDoc(doc2) {\n              if (!doc2) {\n                return doc2;\n              }\n              if (isConcat(doc2) || doc2.type === \"fill\") {\n                const parts = getDocParts(doc2);\n                while (parts.length > 1 && isHardline(...parts.slice(-2))) {\n                  parts.length -= 2;\n                }\n                if (parts.length > 0) {\n                  const lastPart = stripDocTrailingHardlineFromDoc(getLast(parts));\n                  parts[parts.length - 1] = lastPart;\n                }\n                return Array.isArray(doc2) ? parts : Object.assign(Object.assign({}, doc2), {}, {\n                  parts\n                });\n              }\n              switch (doc2.type) {\n                case \"align\":\n                case \"indent\":\n                case \"indent-if-break\":\n                case \"group\":\n                case \"line-suffix\":\n                case \"label\": {\n                  const contents = stripDocTrailingHardlineFromDoc(doc2.contents);\n                  return Object.assign(Object.assign({}, doc2), {}, {\n                    contents\n                  });\n                }\n                case \"if-break\": {\n                  const breakContents = stripDocTrailingHardlineFromDoc(doc2.breakContents);\n                  const flatContents = stripDocTrailingHardlineFromDoc(doc2.flatContents);\n                  return Object.assign(Object.assign({}, doc2), {}, {\n                    breakContents,\n                    flatContents\n                  });\n                }\n              }\n              return doc2;\n            }\n            function stripTrailingHardline(doc2) {\n              return stripDocTrailingHardlineFromDoc(cleanDoc(doc2));\n            }\n            function cleanDocFn(doc2) {\n              switch (doc2.type) {\n                case \"fill\":\n                  if (doc2.parts.every((part) => part === \"\")) {\n                    return \"\";\n                  }\n                  break;\n                case \"group\":\n                  if (!doc2.contents && !doc2.id && !doc2.break && !doc2.expandedStates) {\n                    return \"\";\n                  }\n                  if (doc2.contents.type === \"group\" && doc2.contents.id === doc2.id && doc2.contents.break === doc2.break && doc2.contents.expandedStates === doc2.expandedStates) {\n                    return doc2.contents;\n                  }\n                  break;\n                case \"align\":\n                case \"indent\":\n                case \"indent-if-break\":\n                case \"line-suffix\":\n                  if (!doc2.contents) {\n                    return \"\";\n                  }\n                  break;\n                case \"if-break\":\n                  if (!doc2.flatContents && !doc2.breakContents) {\n                    return \"\";\n                  }\n                  break;\n              }\n              if (!isConcat(doc2)) {\n                return doc2;\n              }\n              const parts = [];\n              for (const part of getDocParts(doc2)) {\n                if (!part) {\n                  continue;\n                }\n                const [currentPart, ...restParts] = isConcat(part) ? getDocParts(part) : [part];\n                if (typeof currentPart === \"string\" && typeof getLast(parts) === \"string\") {\n                  parts[parts.length - 1] += currentPart;\n                } else {\n                  parts.push(currentPart);\n                }\n                parts.push(...restParts);\n              }\n              if (parts.length === 0) {\n                return \"\";\n              }\n              if (parts.length === 1) {\n                return parts[0];\n              }\n              return Array.isArray(doc2) ? parts : Object.assign(Object.assign({}, doc2), {}, {\n                parts\n              });\n            }\n            function cleanDoc(doc2) {\n              return mapDoc(doc2, (currentDoc) => cleanDocFn(currentDoc));\n            }\n            function normalizeParts(parts) {\n              const newParts = [];\n              const restParts = parts.filter(Boolean);\n              while (restParts.length > 0) {\n                const part = restParts.shift();\n                if (!part) {\n                  continue;\n                }\n                if (isConcat(part)) {\n                  restParts.unshift(...getDocParts(part));\n                  continue;\n                }\n                if (newParts.length > 0 && typeof getLast(newParts) === \"string\" && typeof part === \"string\") {\n                  newParts[newParts.length - 1] += part;\n                  continue;\n                }\n                newParts.push(part);\n              }\n              return newParts;\n            }\n            function normalizeDoc(doc2) {\n              return mapDoc(doc2, (currentDoc) => {\n                if (Array.isArray(currentDoc)) {\n                  return normalizeParts(currentDoc);\n                }\n                if (!currentDoc.parts) {\n                  return currentDoc;\n                }\n                return Object.assign(Object.assign({}, currentDoc), {}, {\n                  parts: normalizeParts(currentDoc.parts)\n                });\n              });\n            }\n            function replaceEndOfLine(doc2) {\n              return mapDoc(doc2, (currentDoc) => typeof currentDoc === \"string\" && currentDoc.includes(\"\\n\") ? replaceTextEndOfLine(currentDoc) : currentDoc);\n            }\n            function replaceTextEndOfLine(text) {\n              let replacement = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : literalline;\n              return join(replacement, text.split(\"\\n\")).parts;\n            }\n            function canBreakFn(doc2) {\n              if (doc2.type === \"line\") {\n                return true;\n              }\n            }\n            function canBreak(doc2) {\n              return findInDoc(doc2, canBreakFn, false);\n            }\n            module22.exports = {\n              isConcat,\n              getDocParts,\n              willBreak,\n              traverseDoc,\n              findInDoc,\n              mapDoc,\n              propagateBreaks,\n              removeLines,\n              stripTrailingHardline,\n              normalizeParts,\n              normalizeDoc,\n              cleanDoc,\n              replaceTextEndOfLine,\n              replaceEndOfLine,\n              canBreak\n            };\n          }\n        });\n        var require_doc_printer = __commonJS2({\n          \"src/document/doc-printer.js\"(exports22, module22) {\n            init_define_process();\n            var {\n              convertEndOfLineToChars\n            } = require_end_of_line();\n            var getLast = require_get_last();\n            var getStringWidth = require_get_string_width();\n            var {\n              fill,\n              cursor,\n              indent\n            } = require_doc_builders();\n            var {\n              isConcat,\n              getDocParts\n            } = require_doc_utils();\n            var groupModeMap;\n            var MODE_BREAK = 1;\n            var MODE_FLAT = 2;\n            function rootIndent() {\n              return {\n                value: \"\",\n                length: 0,\n                queue: []\n              };\n            }\n            function makeIndent(ind, options) {\n              return generateInd(ind, {\n                type: \"indent\"\n              }, options);\n            }\n            function makeAlign(indent2, widthOrDoc, options) {\n              if (widthOrDoc === Number.NEGATIVE_INFINITY) {\n                return indent2.root || rootIndent();\n              }\n              if (widthOrDoc < 0) {\n                return generateInd(indent2, {\n                  type: \"dedent\"\n                }, options);\n              }\n              if (!widthOrDoc) {\n                return indent2;\n              }\n              if (widthOrDoc.type === \"root\") {\n                return Object.assign(Object.assign({}, indent2), {}, {\n                  root: indent2\n                });\n              }\n              const alignType = typeof widthOrDoc === \"string\" ? \"stringAlign\" : \"numberAlign\";\n              return generateInd(indent2, {\n                type: alignType,\n                n: widthOrDoc\n              }, options);\n            }\n            function generateInd(ind, newPart, options) {\n              const queue = newPart.type === \"dedent\" ? ind.queue.slice(0, -1) : [...ind.queue, newPart];\n              let value = \"\";\n              let length = 0;\n              let lastTabs = 0;\n              let lastSpaces = 0;\n              for (const part of queue) {\n                switch (part.type) {\n                  case \"indent\":\n                    flush();\n                    if (options.useTabs) {\n                      addTabs(1);\n                    } else {\n                      addSpaces(options.tabWidth);\n                    }\n                    break;\n                  case \"stringAlign\":\n                    flush();\n                    value += part.n;\n                    length += part.n.length;\n                    break;\n                  case \"numberAlign\":\n                    lastTabs += 1;\n                    lastSpaces += part.n;\n                    break;\n                  default:\n                    throw new Error(`Unexpected type '${part.type}'`);\n                }\n              }\n              flushSpaces();\n              return Object.assign(Object.assign({}, ind), {}, {\n                value,\n                length,\n                queue\n              });\n              function addTabs(count) {\n                value += \"\t\".repeat(count);\n                length += options.tabWidth * count;\n              }\n              function addSpaces(count) {\n                value += \" \".repeat(count);\n                length += count;\n              }\n              function flush() {\n                if (options.useTabs) {\n                  flushTabs();\n                } else {\n                  flushSpaces();\n                }\n              }\n              function flushTabs() {\n                if (lastTabs > 0) {\n                  addTabs(lastTabs);\n                }\n                resetLast();\n              }\n              function flushSpaces() {\n                if (lastSpaces > 0) {\n                  addSpaces(lastSpaces);\n                }\n                resetLast();\n              }\n              function resetLast() {\n                lastTabs = 0;\n                lastSpaces = 0;\n              }\n            }\n            function trim(out) {\n              if (out.length === 0) {\n                return 0;\n              }\n              let trimCount = 0;\n              while (out.length > 0 && typeof getLast(out) === \"string\" && /^[\\t ]*$/.test(getLast(out))) {\n                trimCount += out.pop().length;\n              }\n              if (out.length > 0 && typeof getLast(out) === \"string\") {\n                const trimmed = getLast(out).replace(/[\\t ]*$/, \"\");\n                trimCount += getLast(out).length - trimmed.length;\n                out[out.length - 1] = trimmed;\n              }\n              return trimCount;\n            }\n            function fits(next, restCommands, width, hasLineSuffix, mustBeFlat) {\n              let restIdx = restCommands.length;\n              const cmds = [next];\n              const out = [];\n              while (width >= 0) {\n                if (cmds.length === 0) {\n                  if (restIdx === 0) {\n                    return true;\n                  }\n                  cmds.push(restCommands[--restIdx]);\n                  continue;\n                }\n                const {\n                  mode,\n                  doc: doc2\n                } = cmds.pop();\n                if (typeof doc2 === \"string\") {\n                  out.push(doc2);\n                  width -= getStringWidth(doc2);\n                } else if (isConcat(doc2) || doc2.type === \"fill\") {\n                  const parts = getDocParts(doc2);\n                  for (let i = parts.length - 1; i >= 0; i--) {\n                    cmds.push({\n                      mode,\n                      doc: parts[i]\n                    });\n                  }\n                } else {\n                  switch (doc2.type) {\n                    case \"indent\":\n                    case \"align\":\n                    case \"indent-if-break\":\n                    case \"label\":\n                      cmds.push({\n                        mode,\n                        doc: doc2.contents\n                      });\n                      break;\n                    case \"trim\":\n                      width += trim(out);\n                      break;\n                    case \"group\": {\n                      if (mustBeFlat && doc2.break) {\n                        return false;\n                      }\n                      const groupMode = doc2.break ? MODE_BREAK : mode;\n                      const contents = doc2.expandedStates && groupMode === MODE_BREAK ? getLast(doc2.expandedStates) : doc2.contents;\n                      cmds.push({\n                        mode: groupMode,\n                        doc: contents\n                      });\n                      break;\n                    }\n                    case \"if-break\": {\n                      const groupMode = doc2.groupId ? groupModeMap[doc2.groupId] || MODE_FLAT : mode;\n                      const contents = groupMode === MODE_BREAK ? doc2.breakContents : doc2.flatContents;\n                      if (contents) {\n                        cmds.push({\n                          mode,\n                          doc: contents\n                        });\n                      }\n                      break;\n                    }\n                    case \"line\":\n                      if (mode === MODE_BREAK || doc2.hard) {\n                        return true;\n                      }\n                      if (!doc2.soft) {\n                        out.push(\" \");\n                        width--;\n                      }\n                      break;\n                    case \"line-suffix\":\n                      hasLineSuffix = true;\n                      break;\n                    case \"line-suffix-boundary\":\n                      if (hasLineSuffix) {\n                        return false;\n                      }\n                      break;\n                  }\n                }\n              }\n              return false;\n            }\n            function printDocToString(doc2, options) {\n              groupModeMap = {};\n              const width = options.printWidth;\n              const newLine = convertEndOfLineToChars(options.endOfLine);\n              let pos = 0;\n              const cmds = [{\n                ind: rootIndent(),\n                mode: MODE_BREAK,\n                doc: doc2\n              }];\n              const out = [];\n              let shouldRemeasure = false;\n              const lineSuffix = [];\n              while (cmds.length > 0) {\n                const {\n                  ind,\n                  mode,\n                  doc: doc22\n                } = cmds.pop();\n                if (typeof doc22 === \"string\") {\n                  const formatted = newLine !== \"\\n\" ? doc22.replace(/\\n/g, newLine) : doc22;\n                  out.push(formatted);\n                  pos += getStringWidth(formatted);\n                } else if (isConcat(doc22)) {\n                  const parts = getDocParts(doc22);\n                  for (let i = parts.length - 1; i >= 0; i--) {\n                    cmds.push({\n                      ind,\n                      mode,\n                      doc: parts[i]\n                    });\n                  }\n                } else {\n                  switch (doc22.type) {\n                    case \"cursor\":\n                      out.push(cursor.placeholder);\n                      break;\n                    case \"indent\":\n                      cmds.push({\n                        ind: makeIndent(ind, options),\n                        mode,\n                        doc: doc22.contents\n                      });\n                      break;\n                    case \"align\":\n                      cmds.push({\n                        ind: makeAlign(ind, doc22.n, options),\n                        mode,\n                        doc: doc22.contents\n                      });\n                      break;\n                    case \"trim\":\n                      pos -= trim(out);\n                      break;\n                    case \"group\":\n                      switch (mode) {\n                        case MODE_FLAT:\n                          if (!shouldRemeasure) {\n                            cmds.push({\n                              ind,\n                              mode: doc22.break ? MODE_BREAK : MODE_FLAT,\n                              doc: doc22.contents\n                            });\n                            break;\n                          }\n                        case MODE_BREAK: {\n                          shouldRemeasure = false;\n                          const next = {\n                            ind,\n                            mode: MODE_FLAT,\n                            doc: doc22.contents\n                          };\n                          const rem = width - pos;\n                          const hasLineSuffix = lineSuffix.length > 0;\n                          if (!doc22.break && fits(next, cmds, rem, hasLineSuffix)) {\n                            cmds.push(next);\n                          } else {\n                            if (doc22.expandedStates) {\n                              const mostExpanded = getLast(doc22.expandedStates);\n                              if (doc22.break) {\n                                cmds.push({\n                                  ind,\n                                  mode: MODE_BREAK,\n                                  doc: mostExpanded\n                                });\n                                break;\n                              } else {\n                                for (let i = 1; i < doc22.expandedStates.length + 1; i++) {\n                                  if (i >= doc22.expandedStates.length) {\n                                    cmds.push({\n                                      ind,\n                                      mode: MODE_BREAK,\n                                      doc: mostExpanded\n                                    });\n                                    break;\n                                  } else {\n                                    const state = doc22.expandedStates[i];\n                                    const cmd = {\n                                      ind,\n                                      mode: MODE_FLAT,\n                                      doc: state\n                                    };\n                                    if (fits(cmd, cmds, rem, hasLineSuffix)) {\n                                      cmds.push(cmd);\n                                      break;\n                                    }\n                                  }\n                                }\n                              }\n                            } else {\n                              cmds.push({\n                                ind,\n                                mode: MODE_BREAK,\n                                doc: doc22.contents\n                              });\n                            }\n                          }\n                          break;\n                        }\n                      }\n                      if (doc22.id) {\n                        groupModeMap[doc22.id] = getLast(cmds).mode;\n                      }\n                      break;\n                    case \"fill\": {\n                      const rem = width - pos;\n                      const {\n                        parts\n                      } = doc22;\n                      if (parts.length === 0) {\n                        break;\n                      }\n                      const [content, whitespace2] = parts;\n                      const contentFlatCmd = {\n                        ind,\n                        mode: MODE_FLAT,\n                        doc: content\n                      };\n                      const contentBreakCmd = {\n                        ind,\n                        mode: MODE_BREAK,\n                        doc: content\n                      };\n                      const contentFits = fits(contentFlatCmd, [], rem, lineSuffix.length > 0, true);\n                      if (parts.length === 1) {\n                        if (contentFits) {\n                          cmds.push(contentFlatCmd);\n                        } else {\n                          cmds.push(contentBreakCmd);\n                        }\n                        break;\n                      }\n                      const whitespaceFlatCmd = {\n                        ind,\n                        mode: MODE_FLAT,\n                        doc: whitespace2\n                      };\n                      const whitespaceBreakCmd = {\n                        ind,\n                        mode: MODE_BREAK,\n                        doc: whitespace2\n                      };\n                      if (parts.length === 2) {\n                        if (contentFits) {\n                          cmds.push(whitespaceFlatCmd, contentFlatCmd);\n                        } else {\n                          cmds.push(whitespaceBreakCmd, contentBreakCmd);\n                        }\n                        break;\n                      }\n                      parts.splice(0, 2);\n                      const remainingCmd = {\n                        ind,\n                        mode,\n                        doc: fill(parts)\n                      };\n                      const secondContent = parts[0];\n                      const firstAndSecondContentFlatCmd = {\n                        ind,\n                        mode: MODE_FLAT,\n                        doc: [content, whitespace2, secondContent]\n                      };\n                      const firstAndSecondContentFits = fits(firstAndSecondContentFlatCmd, [], rem, lineSuffix.length > 0, true);\n                      if (firstAndSecondContentFits) {\n                        cmds.push(remainingCmd, whitespaceFlatCmd, contentFlatCmd);\n                      } else if (contentFits) {\n                        cmds.push(remainingCmd, whitespaceBreakCmd, contentFlatCmd);\n                      } else {\n                        cmds.push(remainingCmd, whitespaceBreakCmd, contentBreakCmd);\n                      }\n                      break;\n                    }\n                    case \"if-break\":\n                    case \"indent-if-break\": {\n                      const groupMode = doc22.groupId ? groupModeMap[doc22.groupId] : mode;\n                      if (groupMode === MODE_BREAK) {\n                        const breakContents = doc22.type === \"if-break\" ? doc22.breakContents : doc22.negate ? doc22.contents : indent(doc22.contents);\n                        if (breakContents) {\n                          cmds.push({\n                            ind,\n                            mode,\n                            doc: breakContents\n                          });\n                        }\n                      }\n                      if (groupMode === MODE_FLAT) {\n                        const flatContents = doc22.type === \"if-break\" ? doc22.flatContents : doc22.negate ? indent(doc22.contents) : doc22.contents;\n                        if (flatContents) {\n                          cmds.push({\n                            ind,\n                            mode,\n                            doc: flatContents\n                          });\n                        }\n                      }\n                      break;\n                    }\n                    case \"line-suffix\":\n                      lineSuffix.push({\n                        ind,\n                        mode,\n                        doc: doc22.contents\n                      });\n                      break;\n                    case \"line-suffix-boundary\":\n                      if (lineSuffix.length > 0) {\n                        cmds.push({\n                          ind,\n                          mode,\n                          doc: {\n                            type: \"line\",\n                            hard: true\n                          }\n                        });\n                      }\n                      break;\n                    case \"line\":\n                      switch (mode) {\n                        case MODE_FLAT:\n                          if (!doc22.hard) {\n                            if (!doc22.soft) {\n                              out.push(\" \");\n                              pos += 1;\n                            }\n                            break;\n                          } else {\n                            shouldRemeasure = true;\n                          }\n                        case MODE_BREAK:\n                          if (lineSuffix.length > 0) {\n                            cmds.push({\n                              ind,\n                              mode,\n                              doc: doc22\n                            }, ...lineSuffix.reverse());\n                            lineSuffix.length = 0;\n                            break;\n                          }\n                          if (doc22.literal) {\n                            if (ind.root) {\n                              out.push(newLine, ind.root.value);\n                              pos = ind.root.length;\n                            } else {\n                              out.push(newLine);\n                              pos = 0;\n                            }\n                          } else {\n                            pos -= trim(out);\n                            out.push(newLine + ind.value);\n                            pos = ind.length;\n                          }\n                          break;\n                      }\n                      break;\n                    case \"label\":\n                      cmds.push({\n                        ind,\n                        mode,\n                        doc: doc22.contents\n                      });\n                      break;\n                  }\n                }\n                if (cmds.length === 0 && lineSuffix.length > 0) {\n                  cmds.push(...lineSuffix.reverse());\n                  lineSuffix.length = 0;\n                }\n              }\n              const cursorPlaceholderIndex = out.indexOf(cursor.placeholder);\n              if (cursorPlaceholderIndex !== -1) {\n                const otherCursorPlaceholderIndex = out.indexOf(cursor.placeholder, cursorPlaceholderIndex + 1);\n                const beforeCursor = out.slice(0, cursorPlaceholderIndex).join(\"\");\n                const aroundCursor = out.slice(cursorPlaceholderIndex + 1, otherCursorPlaceholderIndex).join(\"\");\n                const afterCursor = out.slice(otherCursorPlaceholderIndex + 1).join(\"\");\n                return {\n                  formatted: beforeCursor + aroundCursor + afterCursor,\n                  cursorNodeStart: beforeCursor.length,\n                  cursorNodeText: aroundCursor\n                };\n              }\n              return {\n                formatted: out.join(\"\")\n              };\n            }\n            module22.exports = {\n              printDocToString\n            };\n          }\n        });\n        var require_doc_debug = __commonJS2({\n          \"src/document/doc-debug.js\"(exports22, module22) {\n            init_define_process();\n            var {\n              isConcat,\n              getDocParts\n            } = require_doc_utils();\n            function flattenDoc(doc2) {\n              if (!doc2) {\n                return \"\";\n              }\n              if (isConcat(doc2)) {\n                const res = [];\n                for (const part of getDocParts(doc2)) {\n                  if (isConcat(part)) {\n                    res.push(...flattenDoc(part).parts);\n                  } else {\n                    const flattened = flattenDoc(part);\n                    if (flattened !== \"\") {\n                      res.push(flattened);\n                    }\n                  }\n                }\n                return {\n                  type: \"concat\",\n                  parts: res\n                };\n              }\n              if (doc2.type === \"if-break\") {\n                return Object.assign(Object.assign({}, doc2), {}, {\n                  breakContents: flattenDoc(doc2.breakContents),\n                  flatContents: flattenDoc(doc2.flatContents)\n                });\n              }\n              if (doc2.type === \"group\") {\n                return Object.assign(Object.assign({}, doc2), {}, {\n                  contents: flattenDoc(doc2.contents),\n                  expandedStates: doc2.expandedStates && doc2.expandedStates.map(flattenDoc)\n                });\n              }\n              if (doc2.type === \"fill\") {\n                return {\n                  type: \"fill\",\n                  parts: doc2.parts.map(flattenDoc)\n                };\n              }\n              if (doc2.contents) {\n                return Object.assign(Object.assign({}, doc2), {}, {\n                  contents: flattenDoc(doc2.contents)\n                });\n              }\n              return doc2;\n            }\n            function printDocToDebug(doc2) {\n              const printedSymbols = /* @__PURE__ */ Object.create(null);\n              const usedKeysForSymbols = /* @__PURE__ */ new Set();\n              return printDoc(flattenDoc(doc2));\n              function printDoc(doc22, index, parentParts) {\n                if (typeof doc22 === \"string\") {\n                  return JSON.stringify(doc22);\n                }\n                if (isConcat(doc22)) {\n                  const printed = getDocParts(doc22).map(printDoc).filter(Boolean);\n                  return printed.length === 1 ? printed[0] : `[${printed.join(\", \")}]`;\n                }\n                if (doc22.type === \"line\") {\n                  const withBreakParent = Array.isArray(parentParts) && parentParts[index + 1] && parentParts[index + 1].type === \"break-parent\";\n                  if (doc22.literal) {\n                    return withBreakParent ? \"literalline\" : \"literallineWithoutBreakParent\";\n                  }\n                  if (doc22.hard) {\n                    return withBreakParent ? \"hardline\" : \"hardlineWithoutBreakParent\";\n                  }\n                  if (doc22.soft) {\n                    return \"softline\";\n                  }\n                  return \"line\";\n                }\n                if (doc22.type === \"break-parent\") {\n                  const afterHardline = Array.isArray(parentParts) && parentParts[index - 1] && parentParts[index - 1].type === \"line\" && parentParts[index - 1].hard;\n                  return afterHardline ? void 0 : \"breakParent\";\n                }\n                if (doc22.type === \"trim\") {\n                  return \"trim\";\n                }\n                if (doc22.type === \"indent\") {\n                  return \"indent(\" + printDoc(doc22.contents) + \")\";\n                }\n                if (doc22.type === \"align\") {\n                  return doc22.n === Number.NEGATIVE_INFINITY ? \"dedentToRoot(\" + printDoc(doc22.contents) + \")\" : doc22.n < 0 ? \"dedent(\" + printDoc(doc22.contents) + \")\" : doc22.n.type === \"root\" ? \"markAsRoot(\" + printDoc(doc22.contents) + \")\" : \"align(\" + JSON.stringify(doc22.n) + \", \" + printDoc(doc22.contents) + \")\";\n                }\n                if (doc22.type === \"if-break\") {\n                  return \"ifBreak(\" + printDoc(doc22.breakContents) + (doc22.flatContents ? \", \" + printDoc(doc22.flatContents) : \"\") + (doc22.groupId ? (!doc22.flatContents ? ', \"\"' : \"\") + `, { groupId: ${printGroupId(doc22.groupId)} }` : \"\") + \")\";\n                }\n                if (doc22.type === \"indent-if-break\") {\n                  const optionsParts = [];\n                  if (doc22.negate) {\n                    optionsParts.push(\"negate: true\");\n                  }\n                  if (doc22.groupId) {\n                    optionsParts.push(`groupId: ${printGroupId(doc22.groupId)}`);\n                  }\n                  const options = optionsParts.length > 0 ? `, { ${optionsParts.join(\", \")} }` : \"\";\n                  return `indentIfBreak(${printDoc(doc22.contents)}${options})`;\n                }\n                if (doc22.type === \"group\") {\n                  const optionsParts = [];\n                  if (doc22.break && doc22.break !== \"propagated\") {\n                    optionsParts.push(\"shouldBreak: true\");\n                  }\n                  if (doc22.id) {\n                    optionsParts.push(`id: ${printGroupId(doc22.id)}`);\n                  }\n                  const options = optionsParts.length > 0 ? `, { ${optionsParts.join(\", \")} }` : \"\";\n                  if (doc22.expandedStates) {\n                    return `conditionalGroup([${doc22.expandedStates.map((part) => printDoc(part)).join(\",\")}]${options})`;\n                  }\n                  return `group(${printDoc(doc22.contents)}${options})`;\n                }\n                if (doc22.type === \"fill\") {\n                  return `fill([${doc22.parts.map((part) => printDoc(part)).join(\", \")}])`;\n                }\n                if (doc22.type === \"line-suffix\") {\n                  return \"lineSuffix(\" + printDoc(doc22.contents) + \")\";\n                }\n                if (doc22.type === \"line-suffix-boundary\") {\n                  return \"lineSuffixBoundary\";\n                }\n                if (doc22.type === \"label\") {\n                  return `label(${JSON.stringify(doc22.label)}, ${printDoc(doc22.contents)})`;\n                }\n                throw new Error(\"Unknown doc type \" + doc22.type);\n              }\n              function printGroupId(id) {\n                if (typeof id !== \"symbol\") {\n                  return JSON.stringify(String(id));\n                }\n                if (id in printedSymbols) {\n                  return printedSymbols[id];\n                }\n                const prefix = String(id).slice(7, -1) || \"symbol\";\n                for (let counter = 0; ; counter++) {\n                  const key = prefix + (counter > 0 ? ` #${counter}` : \"\");\n                  if (!usedKeysForSymbols.has(key)) {\n                    usedKeysForSymbols.add(key);\n                    return printedSymbols[id] = `Symbol.for(${JSON.stringify(key)})`;\n                  }\n                }\n              }\n            }\n            module22.exports = {\n              printDocToDebug\n            };\n          }\n        });\n        init_define_process();\n        module2.exports = {\n          builders: require_doc_builders(),\n          printer: require_doc_printer(),\n          utils: require_doc_utils(),\n          debug: require_doc_debug()\n        };\n      }\n    });\n    return require_doc_js_umd();\n  });\n})(doc);\nconst MAX_LINES = 4;\nconst defaultOptions = {\n  printWidth: 30,\n  tabWidth: 4,\n  useTabs: false\n};\nfunction prettierPrint(doc2) {\n  return docExports.printer.printDocToString(doc2, defaultOptions).formatted;\n}\nfunction addCursor(state, cursor = \"^\", error = false) {\n  const color = (error ? chalk.red : chalk.green).bold;\n  const lines = state.src.split(\"\\n\");\n  const lineIdx = Math.min(lines.length - 1, state.getLineNumber());\n  const startIdx = Math.max(lineIdx - MAX_LINES, 0);\n  const endIdx = Math.min(lineIdx + MAX_LINES + 1, lines.length);\n  const lineSummaries = lines.slice(startIdx, endIdx);\n  if (cursor) {\n    const cursorLine = \" \".repeat(state.getColumnNumber()) + color(cursor);\n    lineSummaries.splice(lineIdx - startIdx + 1, 0, cursorLine);\n  }\n  const resultLines = lineSummaries.map((line, idx) => {\n    const lineNum = startIdx + idx + 1;\n    let paddedLineNum = color.reset.black(String(lineNum));\n    line = lineNum === lineIdx + 1 ? color(line) : line;\n    const paddedLine = `      ${paddedLineNum}| ${line}`;\n    return paddedLine;\n  });\n  return resultLines.join(\"\\n\");\n}\nconst group = (docs, groupOptions = {}) => {\n  return docExports.builders.group(docs, { ...defaultOptions, ...groupOptions });\n};\nconst opStyle = (op) => chalk.gray(op);\nconst PARSER_STRINGS = /* @__PURE__ */ new Map();\nfunction parserPrint(parser) {\n  if (PARSER_STRINGS.has(parser.id)) {\n    return PARSER_STRINGS.get(parser.id);\n  }\n  const print = (innerParser, id) => {\n    if (PARSER_STRINGS.has(innerParser.id)) {\n      return PARSER_STRINGS.get(innerParser.id);\n    }\n    const { name, args, parser: innerInnerParser } = innerParser.context;\n    const parserString = innerInnerParser != null ? print(innerInnerParser, id) : chalk.red.bold(\"unknown\");\n    let s2 = (() => {\n      switch (name) {\n        case \"string\":\n          return chalk.yellow(`\"${args[0]}\"`);\n        case \"regex\":\n        case \"regexConcat\":\n        case \"regexWrap\":\n          return chalk.redBright(`${args[0]}`);\n        case \"wrap\":\n        case \"trim\": {\n          const [left, right] = args;\n          return group([\n            print(left, id),\n            docExports.builders.indent([docExports.builders.softline, parserString]),\n            docExports.builders.softline,\n            print(right, id)\n          ]);\n        }\n        case \"trimWhitespace\":\n          return group([parserString, opStyle(\"?w\")]);\n        case \"not\":\n          return group([\"!\", parserString]);\n        case \"opt\":\n          return group([parserString, opStyle(\"?\")]);\n        case \"next\":\n          const [next] = args;\n          return group([parserString, opStyle(\" >> \"), print(next, id)]);\n        case \"skip\":\n          const [skip] = args;\n          return group([parserString, opStyle(\" << \"), print(skip, id)]);\n        case \"map\":\n          return parserString;\n        case \"all\":\n        case \"then\": {\n          const delim = opStyle(\", \");\n          return group([\n            \"[\",\n            docExports.builders.indent([\n              docExports.builders.softline,\n              docExports.builders.join(\n                [delim, docExports.builders.softline],\n                args.map((x) => print(x, id))\n              )\n            ]),\n            docExports.builders.softline,\n            \"]\"\n          ]);\n        }\n        case \"any\":\n        case \"or\": {\n          const delim = opStyle(\"| \");\n          return group([\n            [\n              docExports.builders.join(\n                [docExports.builders.softline, docExports.builders.ifBreak(delim, \" \" + delim)],\n                args.map((x) => print(x, id))\n              )\n            ]\n          ]);\n        }\n        case \"many\":\n          const [min, max] = args;\n          let bounds = max === Infinity ? `${min},` : `${min},${max}`;\n          bounds = chalk.bold.gray(` {${bounds}}`);\n          return group([parserString, bounds]);\n        case \"sepBy\":\n          return group([\n            parserString,\n            docExports.builders.indent([\" sepBy \", print(args[0], id)])\n          ]);\n        case \"lazy\": {\n          const [lazy2] = args;\n          const p = getLazyParser(lazy2);\n          if (!id) {\n            const s3 = print(p, p.id);\n            PARSER_STRINGS.set(p.id, s3);\n            return s3;\n          } else {\n            return chalk.bold.blue(name);\n          }\n        }\n        case \"debug\":\n          return parserString;\n      }\n    })();\n    s2 ?? (s2 = chalk.red.bold(name));\n    if (id) {\n      PARSER_STRINGS.set(innerParser.id, s2);\n    }\n    return s2;\n  };\n  const doc2 = print(parser);\n  const s = prettierPrint(doc2);\n  PARSER_STRINGS.set(parser.id, s);\n  return s;\n}\nfunction statePrint(state, name = \"\", parserString = \"\") {\n  const stateBgColor = !state.isError ? chalk.bgGreen : chalk.bgRed;\n  const stateColor = !state.isError ? chalk.green : chalk.red;\n  const finished = state.offset >= state.src.length;\n  const stateSymbol = !state.isError ? finished ? \"🎉\" : \"✓\" : \"ｘ\";\n  const stateName = !state.isError ? finished ? \"Done\" : \"Ok\" : \"Err\";\n  const stateString = \" \" + stateName + \" \" + stateSymbol + \" \";\n  const header = group([\n    stateBgColor.bold(stateString),\n    stateColor(`\t${name}\t${state.offset}`),\n    docExports.builders.softline,\n    \"\t\" + chalk.yellow(parserString)\n  ]);\n  const body = (() => {\n    if (state.offset >= state.src.length) {\n      return chalk.bold.greenBright(addCursor(state, \"\", state.isError));\n    }\n    return addCursor(state, \"^\", state.isError);\n  })();\n  const headerBody = group([header, docExports.builders.hardline, docExports.builders.indent([body])]);\n  return prettierPrint(headerBody);\n}\nfunction parserDebug(parser, name = \"\", recursivePrint = false, logger = console.log) {\n  const debug = (state) => {\n    const newState = parser.parser(state);\n    const parserString = recursivePrint ? parserPrint(parser) : parser.context.name;\n    const s = statePrint(newState, name, parserString);\n    logger(s);\n    return newState;\n  };\n  return new Parser(debug, createParserContext(\"debug\", parser, logger));\n}\nclass ParserState {\n  constructor(src, value = void 0, offset = 0, isError = false, furthest = 0) {\n    this.src = src;\n    this.value = value;\n    this.offset = offset;\n    this.isError = isError;\n    this.furthest = furthest;\n  }\n  ok(value, offset = 0) {\n    offset += this.offset;\n    return new ParserState(this.src, value, offset, false);\n  }\n  err(value, offset = 0) {\n    const nextState = this.ok(value, offset);\n    nextState.isError = true;\n    return nextState;\n  }\n  from(value, offset = 0) {\n    offset += this.offset;\n    return new ParserState(this.src, value, offset, this.isError);\n  }\n  getColumnNumber() {\n    const offset = this.offset;\n    const lastNewline = this.src.lastIndexOf(\"\\n\", offset);\n    const columnNumber = lastNewline === -1 ? offset : offset - (lastNewline + 1);\n    return Math.max(0, columnNumber);\n  }\n  getLineNumber() {\n    const newlineIndex = this.src.lastIndexOf(\"\\n\", this.offset);\n    return newlineIndex >= 0 ? this.src.slice(0, newlineIndex).split(\"\\n\").length : 0;\n  }\n  toString() {\n    return statePrint(this);\n  }\n}\nfunction createParserContext(name, parser, ...args) {\n  return {\n    name,\n    parser,\n    args\n  };\n}\nlet PARSER_ID = 0;\nconst MEMO = /* @__PURE__ */ new Map();\nconst LEFT_RECURSION_COUNTS = /* @__PURE__ */ new Map();\nlet lastState;\nfunction mergeErrorState(state) {\n  if (!lastState || lastState && state.offset > lastState.offset) {\n    lastState = state;\n  }\n  return lastState;\n}\nfunction getLazyParser(fn) {\n  if (fn.parser) {\n    return fn.parser;\n  }\n  return fn.parser = fn();\n}\nclass Parser {\n  constructor(parser, context = {}) {\n    __publicField(this, \"id\", PARSER_ID++);\n    __publicField(this, \"state\");\n    this.parser = parser;\n    this.context = context;\n  }\n  reset() {\n    lastState = void 0;\n    MEMO.clear();\n    LEFT_RECURSION_COUNTS.clear();\n  }\n  parse(val) {\n    this.reset();\n    const newState = this.parser(new ParserState(val));\n    this.state = mergeErrorState(newState);\n    this.state.isError = newState.isError;\n    if (this.state.isError) {\n      console.log(this.state.toString());\n    }\n    return newState.value;\n  }\n  getCijKey(state) {\n    return `${this.id}${state.offset}`;\n  }\n  atLeftRecursionLimit(state) {\n    const cij = LEFT_RECURSION_COUNTS.get(this.getCijKey(state)) ?? 0;\n    return cij > state.src.length - state.offset;\n  }\n  memoize() {\n    const memoize = (state) => {\n      const cijKey = this.getCijKey(state);\n      const cij = LEFT_RECURSION_COUNTS.get(cijKey) ?? 0;\n      let cached = MEMO.get(this.id);\n      if (cached && cached.offset >= state.offset) {\n        return cached;\n      } else if (this.atLeftRecursionLimit(state)) {\n        return state.err(void 0);\n      }\n      LEFT_RECURSION_COUNTS.set(cijKey, cij + 1);\n      const newState = this.parser(state);\n      cached = MEMO.get(this.id);\n      if (cached && cached.offset > newState.offset) {\n        newState.offset = cached.offset;\n      } else if (!cached) {\n        MEMO.set(this.id, newState);\n      }\n      return newState;\n    };\n    return new Parser(\n      memoize,\n      createParserContext(\"memoize\", this)\n    );\n  }\n  mergeMemos() {\n    const mergeMemo = (state) => {\n      let cached = MEMO.get(this.id);\n      if (cached) {\n        return cached;\n      } else if (this.atLeftRecursionLimit(state)) {\n        return state.err(void 0);\n      }\n      const newState = this.parser(state);\n      cached = MEMO.get(this.id);\n      if (!cached) {\n        MEMO.set(this.id, newState);\n      }\n      return newState;\n    };\n    return new Parser(\n      mergeMemo,\n      createParserContext(\"mergeMemo\", this)\n    );\n  }\n  then(next) {\n    if (isStringParsers(this, next)) {\n      return concatStringParsers([this, next], \"\", (m) => [m == null ? void 0 : m[0], m == null ? void 0 : m[1]]);\n    }\n    const then = (state) => {\n      const nextState1 = this.parser(state);\n      if (!nextState1.isError) {\n        const nextState2 = next.parser(nextState1);\n        if (!nextState2.isError) {\n          return nextState2.ok([nextState1.value, nextState2.value]);\n        }\n      }\n      mergeErrorState(state);\n      return state.err(void 0);\n    };\n    return new Parser(\n      then,\n      createParserContext(\"then\", this, this, next)\n    );\n  }\n  or(other) {\n    if (isStringParsers(this, other)) {\n      return concatStringParsers([this, other], \"|\");\n    }\n    const or = (state) => {\n      const newState = this.parser(state);\n      if (!newState.isError) {\n        return newState;\n      }\n      return other.parser(state);\n    };\n    return new Parser(\n      or,\n      createParserContext(\"or\", this, this, other)\n    );\n  }\n  chain(fn, chainError = false) {\n    const chain = (state) => {\n      const newState = this.parser(state);\n      if (newState.isError) {\n        return newState;\n      } else if (newState.value || chainError) {\n        return fn(newState.value).parser(newState);\n      }\n      return state;\n    };\n    return new Parser(chain, createParserContext(\"chain\", this, fn));\n  }\n  map(fn, mapError = false) {\n    const map = (state) => {\n      const newState = this.parser(state);\n      if (!newState.isError || mapError) {\n        return newState.ok(fn(newState.value));\n      }\n      return newState;\n    };\n    return new Parser(map, createParserContext(\"map\", this));\n  }\n  mapState(fn) {\n    const mapState = (state) => {\n      const newState = this.parser(state);\n      return fn(newState);\n    };\n    return new Parser(\n      mapState,\n      createParserContext(\"mapState\", this)\n    );\n  }\n  skip(parser) {\n    const skip = (state) => {\n      const nextState1 = this.parser(state);\n      if (!nextState1.isError) {\n        const nextState2 = parser.parser(nextState1);\n        if (!nextState2.isError) {\n          return nextState2.ok(nextState1.value);\n        }\n      }\n      mergeErrorState(state);\n      return state.err(void 0);\n    };\n    return new Parser(\n      skip,\n      createParserContext(\"skip\", this, parser)\n    );\n  }\n  next(parser) {\n    const next = this.then(parser).map(([, b]) => {\n      return b;\n    });\n    next.context = createParserContext(\"next\", this, parser);\n    return next;\n  }\n  opt() {\n    const opt = (state) => {\n      const newState = this.parser(state);\n      if (newState.isError) {\n        mergeErrorState(state);\n        return state.ok(void 0);\n      }\n      return newState;\n    };\n    return new Parser(opt, createParserContext(\"opt\", this));\n  }\n  not(parser) {\n    const negate = (state) => {\n      const newState = this.parser(state);\n      if (newState.isError) {\n        mergeErrorState(state);\n        return state.ok(state.value);\n      } else {\n        return state.err(void 0);\n      }\n    };\n    const not = (state) => {\n      const newState = this.parser(state);\n      if (newState.isError) {\n        mergeErrorState(state);\n        return newState;\n      } else {\n        const nextState = parser.parser(state);\n        if (nextState.isError) {\n          return newState;\n        } else {\n          mergeErrorState(state);\n          return state.err(void 0);\n        }\n      }\n    };\n    return new Parser(\n      parser ? not : negate,\n      createParserContext(\"not\", this, parser)\n    );\n  }\n  wrap(start, end, discard = true) {\n    if (!discard) {\n      return all(start, this, end);\n    }\n    if (isStringParsers(start, this, end)) {\n      return wrapStringParsers(start, this, end);\n    }\n    const wrap = start.next(this).skip(end);\n    wrap.context = createParserContext(\"wrap\", this, start, end);\n    return wrap;\n  }\n  trim(parser = whitespace, discard = true) {\n    var _a;\n    if (!discard) {\n      return all(parser, this, parser);\n    }\n    if (((_a = parser.context) == null ? void 0 : _a.name) === \"whitespace\") {\n      if (isStringParsers(this, parser)) {\n        return concatStringParsers(\n          [parser, this, parser],\n          \"\",\n          (m) => m == null ? void 0 : m[2]\n        );\n      }\n      const whitespaceTrim = (state) => {\n        const newState = trimStateWhitespace(state);\n        const tmpState = this.parser(newState);\n        if (tmpState.isError) {\n          mergeErrorState(state);\n          return state.err(void 0);\n        } else {\n          return trimStateWhitespace(tmpState);\n        }\n      };\n      return new Parser(\n        whitespaceTrim,\n        createParserContext(\"trimWhitespace\", this)\n      );\n    }\n    return this.wrap(parser, parser);\n  }\n  many(min = 0, max = Infinity) {\n    const many = (state) => {\n      const matches = [];\n      let newState = state;\n      for (let i = 0; i < max; i += 1) {\n        const tmpState = this.parser(newState);\n        if (tmpState.isError) {\n          break;\n        }\n        matches.push(tmpState.value);\n        newState = tmpState;\n      }\n      if (matches.length >= min) {\n        return newState.ok(matches);\n      }\n      mergeErrorState(state);\n      return state.err([]);\n    };\n    return new Parser(\n      many,\n      createParserContext(\"many\", this, min, max)\n    );\n  }\n  sepBy(sep, min = 0, max = Infinity) {\n    const sepBy = (state) => {\n      const matches = [];\n      let newState = state;\n      for (let i = 0; i < max; i += 1) {\n        const tmpState = this.parser(newState);\n        if (tmpState.isError) {\n          break;\n        }\n        newState = tmpState;\n        matches.push(newState.value);\n        const sepState = sep.parser(newState);\n        if (sepState.isError) {\n          break;\n        }\n        newState = sepState;\n      }\n      if (matches.length > min) {\n        return newState.ok(matches);\n      }\n      mergeErrorState(state);\n      return state.err([]);\n    };\n    return new Parser(\n      sepBy,\n      createParserContext(\"sepBy\", this, sep)\n    );\n  }\n  eof() {\n    const p = this.skip(eof());\n    p.context = createParserContext(\"eof\", this);\n    return p;\n  }\n  debug(name = \"\", recursivePrint = false, logger = console.log) {\n    return parserDebug(this, name, recursivePrint, logger);\n  }\n  toString() {\n    return parserPrint(this);\n  }\n  static lazy(fn) {\n    const lazy2 = (state) => {\n      return getLazyParser(fn).parser(state);\n    };\n    return new Parser(lazy2, createParserContext(\"lazy\", void 0, fn));\n  }\n}\nfunction isStringParsers(...parsers) {\n  return parsers.every(\n    (p) => {\n      var _a, _b, _c, _d;\n      return (((_a = p.context) == null ? void 0 : _a.name) === \"string\" || ((_b = p.context) == null ? void 0 : _b.name) === \"regex\" || ((_c = p.context) == null ? void 0 : _c.name) === \"whitespace\") && ((_d = p.context) == null ? void 0 : _d.args);\n    }\n  );\n}\nfunction stringParserValue(p) {\n  var _a, _b, _c, _d, _e;\n  if (((_a = p.context) == null ? void 0 : _a.name) === \"string\") {\n    return (_b = p.context) == null ? void 0 : _b.args[0].replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  } else if (((_c = p.context) == null ? void 0 : _c.name) === \"regex\" || ((_d = p.context) == null ? void 0 : _d.name) === \"whitespace\") {\n    return (_e = p.context) == null ? void 0 : _e.args[0].source;\n  }\n}\nfunction concatStringParsers(parsers, delim = \"\", matchFunction) {\n  const s = parsers.map((s2) => `(${stringParserValue(s2)})`).join(delim);\n  const r = new RegExp(s);\n  const rP = regex(r, matchFunction);\n  if (delim !== \"|\") {\n    rP.context = createParserContext(\"regexConcat\", this, r);\n  }\n  return rP;\n}\nfunction wrapStringParsers(left, p, right) {\n  const rP = concatStringParsers([left, p, right], \"\", (m) => {\n    return m == null ? void 0 : m[2];\n  });\n  rP.context.name = \"regexWrap\";\n  return rP;\n}\nfunction eof() {\n  const eof2 = (state) => {\n    if (state.offset >= state.src.length) {\n      return state.ok(void 0);\n    } else {\n      mergeErrorState(state);\n      return state.err();\n    }\n  };\n  return new Parser(eof2, createParserContext(\"eof\", void 0));\n}\nfunction lazy(target, propertyName, descriptor) {\n  const method = descriptor.value.bind(target);\n  descriptor.value = function() {\n    const lazy2 = (state) => {\n      return getLazyParser(method).parser(state);\n    };\n    return new Parser(lazy2, createParserContext(\"lazy\", void 0, method));\n  };\n}\nfunction any(...parsers) {\n  if (isStringParsers(...parsers)) {\n    return concatStringParsers(parsers, \"|\");\n  }\n  const any2 = (state) => {\n    for (const parser of parsers) {\n      const newState = parser.parser(state);\n      if (!newState.isError) {\n        return newState;\n      }\n    }\n    mergeErrorState(state);\n    return state.err(void 0);\n  };\n  return new Parser(\n    parsers.length === 1 ? parsers[0].parser : any2,\n    createParserContext(\"any\", void 0, ...parsers)\n  );\n}\nfunction all(...parsers) {\n  const all2 = (state) => {\n    const matches = [];\n    for (const parser of parsers) {\n      const newState = parser.parser(state);\n      if (newState.isError) {\n        return newState;\n      }\n      if (newState.value !== void 0) {\n        matches.push(newState.value);\n      }\n      state = newState;\n    }\n    mergeErrorState(state);\n    return state.ok(matches);\n  };\n  return new Parser(\n    parsers.length === 1 ? parsers[0].parser : all2,\n    createParserContext(\"all\", void 0, ...parsers)\n  );\n}\nfunction string(str) {\n  const string2 = (state) => {\n    if (state.offset >= state.src.length) {\n      return state.err(void 0);\n    }\n    const s = state.src.slice(state.offset, state.offset + str.length);\n    if (s === str) {\n      return state.ok(s, s.length);\n    }\n    mergeErrorState(state);\n    return state.err(void 0);\n  };\n  return new Parser(\n    string2,\n    createParserContext(\"string\", void 0, str)\n  );\n}\nfunction regex(r, matchFunction = (m) => m == null ? void 0 : m[0]) {\n  const flags = r.flags.replace(/y/g, \"\");\n  const sticky = new RegExp(r, flags + \"y\");\n  const regex2 = (state) => {\n    if (state.offset >= state.src.length) {\n      return state.err(void 0);\n    }\n    sticky.lastIndex = state.offset;\n    const match = matchFunction(state.src.match(sticky));\n    if (match) {\n      return state.ok(match, sticky.lastIndex - state.offset);\n    } else if (match === \"\") {\n      return state.ok(void 0);\n    }\n    mergeErrorState(state);\n    return state.err(void 0);\n  };\n  return new Parser(\n    regex2,\n    createParserContext(\"regex\", void 0, r)\n  );\n}\nconst WHITESPACE = /\\s*/y;\nconst trimStateWhitespace = (state) => {\n  var _a;\n  if (state.offset >= state.src.length) {\n    return state;\n  }\n  WHITESPACE.lastIndex = state.offset;\n  const match = ((_a = state.src.match(WHITESPACE)) == null ? void 0 : _a[0]) ?? \"\";\n  return state.ok(state.value, match.length);\n};\nconst whitespace = regex(/\\s*/);\nwhitespace.context.name = \"whitespace\";\nexport {\n  Parser,\n  all,\n  any,\n  eof,\n  getLazyParser,\n  lazy,\n  mergeErrorState,\n  regex,\n  string,\n  whitespace\n};\n//# sourceMappingURL=parse.js.map\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { regex, any, string, all, lazy, eof, Parser } from \"./parse.js\";\nimport \"chalk\";\nvar __defProp2 = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp2(target, key, result);\n  return result;\n};\nconst operatorToType = {\n  \"|\": \"alternation\",\n  \",\": \"concatenation\",\n  \"-\": \"minus\",\n  \"<<\": \"skip\",\n  \">>\": \"next\",\n  \"*\": \"many\",\n  \"+\": \"many1\",\n  \"?\": \"optional\",\n  \"?w\": \"optionalWhitespace\"\n};\nconst reduceBinaryExpression = ([left, rightExpression]) => {\n  if (rightExpression.length === 0) {\n    return left;\n  }\n  return rightExpression.reduce((acc, [op, right]) => {\n    return {\n      type: operatorToType[op],\n      value: [acc, right]\n    };\n  }, left);\n};\nconst mapFactor = ([term, op]) => {\n  if (op === void 0) {\n    return term;\n  }\n  const type = operatorToType[op];\n  return {\n    type,\n    value: term\n  };\n};\nfunction mapStatePosition(parser) {\n  return parser.mapState((state) => {\n    if (state.value) {\n      state.value.column = state.getColumnNumber();\n      state.value.line = state.getLineNumber();\n      state.value.offset = state.offset;\n    }\n    return state;\n  });\n}\nconst defaultOptions = {\n  debug: false,\n  comments: true\n};\nclass EBNFGrammar {\n  constructor(options) {\n    __publicField(this, \"options\");\n    this.options = {\n      ...defaultOptions,\n      ...options ?? {}\n    };\n  }\n  identifier() {\n    return regex(/[_a-zA-Z][_a-zA-Z0-9]*/).trim();\n  }\n  literal() {\n    return this.trimBigComment(\n      any(\n        regex(/[^\"]+/).wrap(string('\"'), string('\"')),\n        regex(/[^']+/).wrap(string(\"'\"), string(\"'\"))\n      ).map((value) => {\n        return {\n          type: \"literal\",\n          value\n        };\n      })\n    );\n  }\n  epsilon() {\n    return any(string(\"epsilon\"), string(\"ε\")).trim().map(() => {\n      return {\n        type: \"epsilon\",\n        value: void 0\n      };\n    });\n  }\n  nonterminal() {\n    return this.identifier().map((value) => {\n      return {\n        type: \"nonterminal\",\n        value\n      };\n    });\n  }\n  bigComment() {\n    return regex(/\\/\\*[^\\*]*\\*\\//).trim();\n  }\n  comment() {\n    return regex(/\\/\\/.*/).or(this.bigComment()).trim();\n  }\n  trimBigComment(e) {\n    return e.trim(this.bigComment().many(), false).map(([left, expression, right]) => {\n      expression.comment = {\n        left,\n        right\n      };\n      return expression;\n    });\n  }\n  group() {\n    return this.rhs().trim().wrap(string(\"(\"), string(\")\")).map((value) => {\n      return {\n        type: \"group\",\n        value\n      };\n    });\n  }\n  regex() {\n    return regex(/[^\\/]*/).wrap(string(\"/\"), string(\"/\")).then(regex(/[gimuy]*/).opt()).map(([r, flags]) => {\n      return {\n        type: \"regex\",\n        value: new RegExp(r, flags)\n      };\n    });\n  }\n  optionalGroup() {\n    return this.rhs().trim().wrap(string(\"[\"), string(\"]\")).map((value) => {\n      return {\n        type: \"optional\",\n        value: {\n          type: \"group\",\n          value\n        }\n      };\n    });\n  }\n  manyGroup() {\n    return this.rhs().trim().wrap(string(\"{\"), string(\"}\")).map((value) => {\n      return {\n        type: \"many\",\n        value: {\n          type: \"group\",\n          value\n        }\n      };\n    });\n  }\n  lhs() {\n    return this.identifier();\n  }\n  term() {\n    return mapStatePosition(\n      any(\n        this.epsilon(),\n        this.group(),\n        this.optionalGroup(),\n        this.manyGroup(),\n        this.nonterminal(),\n        this.literal(),\n        this.regex()\n      )\n    );\n  }\n  factor() {\n    return this.trimBigComment(\n      all(\n        this.term(),\n        any(\n          string(\"?w\").trim(),\n          string(\"?\").trim(),\n          string(\"*\").trim(),\n          string(\"+\").trim()\n        ).opt()\n      ).map(mapFactor)\n    );\n  }\n  binaryFactor() {\n    return all(\n      this.factor(),\n      all(\n        any(string(\"<<\").trim(), string(\">>\").trim(), string(\"-\").trim()),\n        this.factor()\n      ).many()\n    ).map(reduceBinaryExpression);\n  }\n  concatenation() {\n    return this.binaryFactor().sepBy(string(\",\").trim()).map((value) => {\n      if (value.length === 1) {\n        return value[0];\n      }\n      return {\n        type: \"concatenation\",\n        value\n      };\n    });\n  }\n  alternation() {\n    return this.concatenation().sepBy(string(\"|\").trim()).map((value) => {\n      if (value.length === 1) {\n        return value[0];\n      }\n      return {\n        type: \"alternation\",\n        value\n      };\n    });\n  }\n  rhs() {\n    return this.alternation();\n  }\n  productionRule() {\n    return all(\n      this.lhs(),\n      string(\"=\").trim(),\n      this.rhs(),\n      any(string(\";\"), string(\".\")).trim()\n    ).map(([name, , expression]) => {\n      return { name, expression };\n    });\n  }\n  grammar() {\n    return this.productionRule().trim(this.comment().many(), false).map(([above, rule, below]) => {\n      rule.comment = {\n        above,\n        below\n      };\n      return rule;\n    }).many(1);\n  }\n}\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"bigComment\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"comment\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"group\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"regex\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"optionalGroup\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"manyGroup\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"lhs\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"term\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"factor\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"binaryFactor\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"concatenation\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"alternation\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"rhs\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"productionRule\", 1);\n__decorateClass([\n  lazy\n], EBNFGrammar.prototype, \"grammar\", 1);\nfunction topologicalSort(ast) {\n  const visited = /* @__PURE__ */ new Set();\n  const order = [];\n  function visit(node, stack) {\n    if (stack.has(node) || visited.has(node)) {\n      return;\n    }\n    stack.add(node);\n    const productionRule = ast.get(node);\n    if (!productionRule) {\n      return;\n    }\n    const expr = productionRule.expression;\n    if (expr.type === \"nonterminal\") {\n      visit(expr.value, stack);\n    } else if (expr.value instanceof Array) {\n      for (const child of expr.value) {\n        if (child.type === \"nonterminal\") {\n          visit(child.value, stack);\n        }\n      }\n    }\n    visited.add(node);\n    stack.delete(node);\n    order.unshift(ast.get(node));\n  }\n  for (const [name] of ast) {\n    visit(name, /* @__PURE__ */ new Set());\n  }\n  const newAST = /* @__PURE__ */ new Map();\n  for (const rule of order) {\n    newAST.set(rule.name, rule);\n  }\n  return newAST;\n}\nconst findCommonPrefix = (e1, e2) => {\n  if (!(e1 == null ? void 0 : e1.type) || !(e2 == null ? void 0 : e2.type) || e1.type !== e2.type) {\n    return void 0;\n  }\n  switch (e1.type) {\n    case \"literal\":\n    case \"nonterminal\": {\n      if (e1.value !== e2.value) {\n        return void 0;\n      } else {\n        return [e1, { type: \"epsilon\" }, { type: \"epsilon\" }];\n      }\n    }\n    case \"group\":\n    case \"optional\":\n    case \"optionalWhitespace\":\n    case \"many\":\n    case \"many1\": {\n      const common = findCommonPrefix(e1.value, e2.value);\n      if (!common) {\n        return void 0;\n      } else {\n        return [\n          {\n            type: e1.type,\n            value: common[0]\n          },\n          {\n            type: e1.type,\n            value: common[1]\n          },\n          {\n            type: e1.type,\n            value: common[2]\n          }\n        ];\n      }\n    }\n    case \"concatenation\": {\n      const commons = e1.value.map(\n        (_, i) => findCommonPrefix(e1.value[i], e2.value[i])\n      );\n      if (commons.some((x) => x === void 0)) {\n        return void 0;\n      }\n      const prefixes = commons.map((x) => x[0]);\n      const e1s = commons.map((x) => x[1]);\n      const e2s = commons.map((x) => x[2]);\n      const startIx = prefixes.lastIndexOf(null);\n      if (startIx === prefixes.length - 1) {\n        return void 0;\n      }\n      const prefix = prefixes.slice(startIx + 1);\n      return [\n        {\n          type: \"concatenation\",\n          value: prefix\n        },\n        {\n          type: \"concatenation\",\n          value: e1s\n        },\n        {\n          type: \"concatenation\",\n          value: e2s\n        }\n      ];\n    }\n    case \"alternation\":\n      for (const e of e1.value) {\n        const common = findCommonPrefix(e, e2);\n        if (common) {\n          return common;\n        }\n      }\n      for (const e of e2.value) {\n        const common = findCommonPrefix(e1, e);\n        if (common) {\n          return common;\n        }\n      }\n      return void 0;\n  }\n  return void 0;\n};\nconst comparePrefix = (prefix, expr) => {\n  if (prefix.type !== expr.type) {\n    return false;\n  }\n  switch (prefix.type) {\n    case \"literal\":\n    case \"nonterminal\":\n      return prefix.value === expr.value;\n    case \"group\":\n    case \"optional\":\n    case \"many\":\n    case \"many1\":\n      return comparePrefix(prefix.value, expr.value);\n    case \"minus\":\n    case \"skip\":\n    case \"next\":\n      return comparePrefix(prefix.value[0], expr.value[0]) && comparePrefix(prefix.value[1], expr.value[1]);\n    case \"concatenation\":\n      return prefix.value.every((e, i) => comparePrefix(e, expr.value[i]));\n    case \"alternation\":\n      return prefix.value.some((e, i) => comparePrefix(e, expr.value[i]));\n    case \"epsilon\":\n      return true;\n  }\n};\nfunction rewriteTreeLeftRecursion(name, expr) {\n  const prefixMap = /* @__PURE__ */ new Map();\n  let commonPrefix = null;\n  for (let i = 0; i < expr.value.length - 1; i++) {\n    const e1 = expr.value[i];\n    const e2 = expr.value[i + 1];\n    const common = findCommonPrefix(e1, e2);\n    if (common) {\n      const [prefix, te1, te2] = common;\n      if (commonPrefix !== null && comparePrefix(prefix, commonPrefix)) {\n        prefixMap.get(commonPrefix).push(te2);\n      } else {\n        prefixMap.set(prefix, [te1, te2]);\n        commonPrefix = prefix;\n      }\n      if (i === expr.value.length - 2) {\n        expr.value.shift();\n      }\n      expr.value.shift();\n      i -= 1;\n    }\n  }\n  for (const [prefix, expressions] of prefixMap) {\n    const alternation = {\n      type: \"alternation\",\n      value: expressions\n    };\n    const newExpr = {\n      type: \"concatenation\",\n      value: [\n        {\n          type: \"group\",\n          value: alternation\n        },\n        {\n          type: \"group\",\n          value: prefix\n        }\n      ]\n    };\n    expr.value.push(newExpr);\n  }\n}\nconst removeDirectLeftRecursionProduction = (name, expr, tailName) => {\n  const head = [];\n  const tail = [];\n  const APrime = {\n    type: \"nonterminal\",\n    value: tailName\n  };\n  for (let i = 0; i < expr.value.length; i++) {\n    const e = expr.value[i];\n    if (e.type === \"concatenation\" && e.value[0].value === name) {\n      tail.push({\n        type: \"concatenation\",\n        value: [...e.value.slice(1), APrime]\n      });\n    } else {\n      head.push({\n        type: \"concatenation\",\n        value: [e, APrime]\n      });\n    }\n  }\n  if (tail.length === 0) {\n    return [void 0, void 0];\n  }\n  tail.push({\n    type: \"epsilon\"\n  });\n  return [\n    {\n      type: \"alternation\",\n      value: head\n    },\n    {\n      type: \"alternation\",\n      value: tail\n    }\n  ];\n};\nfunction removeDirectLeftRecursion(ast) {\n  const newNodes = /* @__PURE__ */ new Map();\n  let uniqueIndex = 0;\n  for (const [name, productionRule] of ast) {\n    const { expression } = productionRule;\n    if (expression.type === \"alternation\") {\n      const tailName = `${name}_${uniqueIndex++}`;\n      const [head, tail] = removeDirectLeftRecursionProduction(\n        name,\n        expression,\n        tailName\n      );\n      if (head) {\n        newNodes.set(tailName, {\n          name: tailName,\n          expression: tail\n        });\n        newNodes.set(name, {\n          name,\n          expression: head,\n          comment: productionRule.comment\n        });\n      }\n    }\n  }\n  if (newNodes.size === 0) {\n    return ast;\n  }\n  for (const [name, productionRule] of newNodes) {\n    ast.set(name, productionRule);\n  }\n  for (const [name, productionRule] of ast) {\n    const { expression } = productionRule;\n    if (expression.type === \"alternation\") {\n      rewriteTreeLeftRecursion(name, expression);\n    }\n  }\n}\nfunction removeIndirectLeftRecursion(ast) {\n  for (const [name, expression] of ast) {\n  }\n}\nfunction removeAllLeftRecursion(ast) {\n  const newAST = topologicalSort(ast);\n  removeDirectLeftRecursion(newAST);\n  return newAST;\n}\nfunction generateASTFromEBNF(input) {\n  const parser = new EBNFGrammar().grammar().eof();\n  const parsed = parser.parse(input);\n  if (!parsed) {\n    return [parser];\n  }\n  const ast = parsed.reduce((acc, productionRule, ix) => {\n    return acc.set(productionRule.name, productionRule);\n  }, /* @__PURE__ */ new Map());\n  return [parser, ast];\n}\nfunction generateParserFromAST(ast) {\n  function generateParser(name, expr) {\n    var _a, _b;\n    switch (expr.type) {\n      case \"literal\":\n        return string(expr.value);\n      case \"nonterminal\":\n        const l = Parser.lazy(() => {\n          return nonterminals[expr.value];\n        });\n        l.context.name = expr.value;\n        return l;\n      case \"epsilon\":\n        return eof().opt();\n      case \"group\":\n        return generateParser(name, expr.value);\n      case \"regex\":\n        return regex(expr.value);\n      case \"optionalWhitespace\":\n        return generateParser(name, expr.value).trim();\n      case \"optional\":\n        return generateParser(name, expr.value).opt();\n      case \"many\":\n        return generateParser(name, expr.value).many();\n      case \"many1\":\n        return generateParser(name, expr.value).many(1);\n      case \"skip\":\n        return generateParser(name, expr.value[0]).skip(\n          generateParser(name, expr.value[1])\n        );\n      case \"next\":\n        return generateParser(name, expr.value[0]).next(\n          generateParser(name, expr.value[1])\n        );\n      case \"minus\":\n        return generateParser(name, expr.value[0]).not(\n          generateParser(name, expr.value[1])\n        );\n      case \"concatenation\": {\n        const parsers = expr.value.map((x) => generateParser(name, x));\n        if (((_b = (_a = parsers.at(-1)) == null ? void 0 : _a.context) == null ? void 0 : _b.name) === \"eof\") {\n          parsers.pop();\n        }\n        return all(...parsers);\n      }\n      case \"alternation\": {\n        return any(...expr.value.map((x) => generateParser(name, x)));\n      }\n    }\n  }\n  const nonterminals = {};\n  for (const [name, productionRule] of ast.entries()) {\n    nonterminals[name] = generateParser(name, productionRule.expression);\n  }\n  return nonterminals;\n}\nfunction generateParserFromEBNF(input, optimizeGraph = false) {\n  let [parser, ast] = generateASTFromEBNF(input);\n  if (optimizeGraph) {\n    ast = removeAllLeftRecursion(ast);\n  }\n  const nonterminals = generateParserFromAST(ast);\n  return [nonterminals, ast];\n}\nexport {\n  EBNFGrammar,\n  comparePrefix,\n  findCommonPrefix,\n  generateASTFromEBNF,\n  generateParserFromAST,\n  generateParserFromEBNF,\n  removeAllLeftRecursion,\n  removeDirectLeftRecursion,\n  removeIndirectLeftRecursion,\n  rewriteTreeLeftRecursion,\n  topologicalSort\n};\n//# sourceMappingURL=ebnf.js.map\n","import path from \"path\";\nimport vscode from \"vscode\";\nimport { formatBBNF } from \"../../src/prettier-plugin-bbnf\";\n\nimport {\n    DocumentRangeFormattingRequest,\n    LanguageClient,\n    LanguageClientOptions,\n    ServerOptions,\n    TransportKind,\n} from \"vscode-languageclient/node\";\nimport { generateParserFromEBNF } from \"@mkbabb/parse-that/ebnf\";\n\nconst DOCUMENT_SELECTOR = {\n    language: \"bbnf\",\n    scheme: \"file\",\n} as vscode.DocumentSelector;\n\nlet LANGUAGE_CLIENT: LanguageClient;\n\ntype TestGrammarCache = {\n    nonterminal: string;\n    testString: string;\n};\nconst testGrammarCache = new Map<string, TestGrammarCache>();\n\nconst testGrammar = vscode.commands.registerCommand(\n    \"extension.testGrammar\",\n    async () => {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            return;\n        }\n        const document = editor.document;\n        const text = document.getText();\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let nonterminals, ast;\n        try {\n            [nonterminals, ast] = generateParserFromEBNF(text);\n        } catch (e) {\n            return;\n        }\n\n        const key = document.uri.toString();\n        if (!testGrammarCache.has(key)) {\n            testGrammarCache.set(key, {\n                nonterminal: \"\",\n                testString: \"\",\n            });\n        }\n        const cache = testGrammarCache.get(key)!;\n\n        const nonterminalString = await vscode.window.showInputBox({\n            prompt: \"Enter a nonterminal to test\",\n            placeHolder: \"Type here...\",\n            value: cache.nonterminal,\n        });\n\n        if (!nonterminalString || !nonterminals[nonterminalString]) {\n            vscode.window.showErrorMessage(\n                `Nonterminal ${nonterminalString} not found`\n            );\n            return;\n        }\n\n        cache.nonterminal = nonterminalString;\n\n        const testString = await vscode.window.showInputBox({\n            prompt: \"Enter your test string\",\n            placeHolder: \"Type here...\",\n            value: cache.testString,\n        });\n\n        if (!testString) {\n            vscode.window.showErrorMessage(\"No test string provided\");\n            return;\n        }\n        cache.testString = testString;\n\n        const parser = nonterminals[nonterminalString];\n        const result = parser.parse(testString);\n\n        if (!result) {\n            vscode.window.showInformationMessage(\"No match X\");\n        } else {\n            vscode.window.showInformationMessage(`Matched ✓: ${result}`);\n        }\n    }\n);\n\nexport function activate(context: vscode.ExtensionContext) {\n    // The server is implemented in node\n    const serverModule = context.asAbsolutePath(\n        path.join(\"server\", \"out\", \"server.js\")\n    );\n\n    // If the extension is launched in debug mode then the debug server options are used\n    // Otherwise the run options are used\n    const serverOptions: ServerOptions = {\n        run: { module: serverModule, transport: TransportKind.ipc },\n        debug: {\n            module: serverModule,\n            transport: TransportKind.ipc,\n        },\n    };\n\n    // Options to control the language client\n    const clientOptions: LanguageClientOptions = {\n        // Register the server for plain text documents\n        documentSelector: [DOCUMENT_SELECTOR] as any,\n        synchronize: {\n            // Notify the server about file changes to '.clientrc files contained in the workspace\n            fileEvents: vscode.workspace.createFileSystemWatcher(\"**/.clientrc\"),\n        },\n    };\n\n    // Create the language client and start the client.\n    LANGUAGE_CLIENT = new LanguageClient(\n        \"languageServerExample\",\n        \"Language Server Example\",\n        serverOptions,\n        clientOptions\n    );\n\n    // Start the client. This will also launch the server\n    LANGUAGE_CLIENT.start();\n\n    context.subscriptions.push(testGrammar);\n}\n\nexport function deactivate(): Thenable<void> | undefined {\n    if (!LANGUAGE_CLIENT) {\n        return undefined;\n    }\n    return LANGUAGE_CLIENT.stop();\n}\n"],"names":["__defProp","__defNormalProp","obj","key","value","__publicField","docExports","doc","v","module","exports","factory","__getOwnPropNames","__commonJS","cb","mod","require_doc_js_umd","exports2","module2","__create","__defProp2","__getOwnPropDesc","__getOwnPropNames2","__getProtoOf","__hasOwnProp","__esm","fn","res","__commonJS2","__export","target","all2","name","__copyProps","to","from","except","desc","__toESM","isNodeMode","__toCommonJS","init_define_process","require_doc_builders","exports22","module22","concat","parts","indent","contents","align","widthOrString","group2","opts","dedentToRoot","markAsRoot","dedent","conditionalGroup","states","fill","ifBreak","breakContents","flatContents","indentIfBreak","lineSuffix","lineSuffixBoundary","breakParent","trim","hardlineWithoutBreakParent","literallineWithoutBreakParent","line","softline","hardline","literalline","cursor","join","sep","arr","i","addAlignmentToDoc","doc2","size","tabWidth","aligned","label","label2","require_end_of_line","guessEndOfLine","text","index","convertEndOfLineToChars","countEndOfLineChars","eol","regex2","endOfLines","normalizeEndOfLine","require_get_last","getLast","ansiRegex","onlyFirst","pattern","init_ansi_regex","stripAnsi","string2","init_strip_ansi","isFullwidthCodePoint","codePoint","init_is_fullwidth_code_point","require_emoji_regex","string_width_exports","stringWidth","import_emoji_regex","width","init_string_width","require_get_string_width","stringWidth2","notAsciiRegex","getStringWidth","require_doc_utils","isConcat","getDocParts","traverseDocOnExitStackMarker","traverseDoc","onEnter","onExit","shouldTraverseConditionalGroups","docsStack","doc22","ic","mapDoc","mapped","rec","result","process2","expandedStates","findInDoc","defaultValue","hasStopped","findInDocOnEnterFn","maybeResult","willBreakFn","willBreak","breakParentGroup","groupStack","parentGroup","propagateBreaks","alreadyVisitedSet","propagateBreaksOnEnterFn","propagateBreaksOnExitFn","removeLinesFn","removeLines","isHardline","nextDoc","stripDocTrailingHardlineFromDoc","lastPart","stripTrailingHardline","cleanDoc","cleanDocFn","part","currentPart","restParts","currentDoc","normalizeParts","newParts","normalizeDoc","replaceEndOfLine","replaceTextEndOfLine","replacement","canBreakFn","canBreak","require_doc_printer","groupModeMap","MODE_BREAK","MODE_FLAT","rootIndent","makeIndent","ind","options","generateInd","makeAlign","indent2","widthOrDoc","newPart","queue","length","lastTabs","lastSpaces","flush","addTabs","addSpaces","flushSpaces","count","flushTabs","resetLast","out","trimCount","trimmed","fits","next","restCommands","hasLineSuffix","mustBeFlat","restIdx","cmds","mode","groupMode","printDocToString","newLine","pos","shouldRemeasure","formatted","rem","mostExpanded","state","cmd","content","whitespace2","contentFlatCmd","contentBreakCmd","contentFits","whitespaceFlatCmd","whitespaceBreakCmd","remainingCmd","secondContent","cursorPlaceholderIndex","otherCursorPlaceholderIndex","beforeCursor","aroundCursor","afterCursor","require_doc_debug","flattenDoc","flattened","printDocToDebug","printedSymbols","usedKeysForSymbols","printDoc","parentParts","printed","withBreakParent","printGroupId","optionsParts","id","prefix","counter","MAX_LINES","defaultOptions","prettierPrint","addCursor","error","color","chalk","lines","lineIdx","startIdx","endIdx","lineSummaries","cursorLine","idx","lineNum","paddedLineNum","group","docs","groupOptions","opStyle","op","PARSER_STRINGS","parserPrint","parser","print","innerParser","args","innerInnerParser","parserString","s2","left","right","skip","delim","x","min","max","bounds","lazy2","p","getLazyParser","s3","s","statePrint","stateBgColor","stateColor","finished","stateSymbol","stateString","header","body","headerBody","parserDebug","recursivePrint","logger","debug","newState","Parser","createParserContext","ParserState","src","offset","isError","furthest","nextState","lastNewline","columnNumber","newlineIndex","PARSER_ID","MEMO","LEFT_RECURSION_COUNTS","lastState","mergeErrorState","context","val","memoize","cijKey","cij","cached","mergeMemo","isStringParsers","concatStringParsers","m","then","nextState1","nextState2","other","or","chainError","chain","mapError","map","mapState","b","opt","negate","not","start","end","discard","all","wrapStringParsers","wrap","whitespace","_a","whitespaceTrim","trimStateWhitespace","tmpState","many","matches","sepBy","sepState","eof","parsers","_b","_c","_d","stringParserValue","_e","matchFunction","r","rP","regex","eof2","lazy","propertyName","descriptor","method","any","any2","string","str","flags","sticky","match","WHITESPACE","__decorateClass","decorators","kind","decorator","operatorToType","reduceBinaryExpression","rightExpression","acc","mapFactor","term","mapStatePosition","EBNFGrammar","e","expression","above","rule","below","topologicalSort","ast","visited","order","visit","node","stack","productionRule","expr","child","newAST","findCommonPrefix","e1","e2","common","commons","_","prefixes","e1s","e2s","startIx","comparePrefix","rewriteTreeLeftRecursion","prefixMap","commonPrefix","te1","te2","expressions","newExpr","removeDirectLeftRecursionProduction","tailName","head","tail","APrime","removeDirectLeftRecursion","newNodes","uniqueIndex","removeAllLeftRecursion","generateASTFromEBNF","input","parsed","ix","generateParserFromAST","generateParser","l","nonterminals","generateParserFromEBNF","optimizeGraph","DOCUMENT_SELECTOR","LANGUAGE_CLIENT","testGrammarCache","testGrammar","vscode","editor","document","cache","nonterminalString","testString","activate","serverModule","path","serverOptions","TransportKind","clientOptions","LanguageClient","deactivate"],"mappings":"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","x_google_ignoreList":[0,1]}